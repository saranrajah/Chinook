@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using System.Security.Claims;
@inject IArtistService ArtistService
@inject IPlaylistService PlaylistService

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
        {
            <div class="alert alert-danger fade show">
                <div class="d-flex align-items-start">
                    <div class="flex-grow-1">
                        @ErrorMessage
                    </div>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseErrorMessage"></button>
                </div>
            </div>
        }

        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="SelectedPlaylistId">
                @if (UserPlaylists != null)
                {
                    foreach (var item in UserPlaylists.Where(w => w.Playlist?.Name != "My favorite tracks"))
                    {
                        <option value="@item.PlaylistId">@item.Playlist?.Name</option>
                    }

                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind=PlaylistName @bind:event="oninput">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string ErrorMessage;
    private string CurrentUserId;
    private List<UserPlaylist> UserPlaylists;
    private string PlaylistName = "";
    private long SelectedPlaylistId;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        Artist = await ArtistService.GetArtistById(ArtistId);

        Tracks = await PlaylistService.GetTracksByArtist(ArtistId, CurrentUserId);

        UserPlaylists = await PlaylistService.GetUserPlaylists(CurrentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = true;

        await PlaylistService.AddTrackToPlaylist(null, trackId, CurrentUserId, true);

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist My favorite tracks.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = false;

        PlaylistService.RemoveTrackFromPlaylist(0, trackId, true);

        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist My favorite tracks.";
    }

    private async void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        PlaylistName = "";
        UserPlaylists = await PlaylistService.GetUserPlaylists(CurrentUserId);
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async void AddTrackToPlaylist()
    {
        try
        {
            Models.Playlist createdPlaylist;

            if (!string.IsNullOrEmpty(PlaylistName))
            {
                var newPlaylist = new Models.Playlist()
                    {
                        PlaylistId = 0,
                        Name = PlaylistName
                    };

                createdPlaylist = await PlaylistService.AddTrackToPlaylist(newPlaylist, SelectedTrack.TrackId, CurrentUserId, false);
            }
            else
            {
                createdPlaylist = await PlaylistService.AddTrackToPlaylist(UserPlaylists.Where(w => w.PlaylistId == SelectedPlaylistId).Select(s => s.Playlist).First(), SelectedTrack.TrackId, CurrentUserId, false);
            }

            CloseInfoMessage();
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {createdPlaylist.Name}.";
            PlaylistDialog.Close();
        }
        catch (ApplicationException ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    private void CloseErrorMessage()
    {
        InfoMessage = "";
    }
}
